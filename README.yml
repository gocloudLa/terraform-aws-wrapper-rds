module_name: Terraform RDS Module
module_description: The Terraform wrapper for RDS simplifies the configuration of the Relational Database Service in the AWS cloud. This wrapper functions as a predefined template, facilitating the creation and management of RDS instances by handling all the technical details.
module_badges:
  - url: "https://github.com/gocloudLa/terraform-aws-wrapper-rds/releases/latest"
    image: "https://img.shields.io/github/v/release/gocloudLa/terraform-aws-wrapper-rds.svg?style=for-the-badge"
    alt: "Latest Release"
  - url: ""
    image: "https://img.shields.io/github/last-commit/gocloudLa/terraform-aws-wrapper-rds.svg?style=for-the-badge"
    alt: "Last Commit"
  - url: "https://registry.terraform.io/modules/gocloudLa/wrapper-rds/aws"
    image: "https://img.shields.io/badge/Terraform-Registry-7B42BC?style=for-the-badge&logo=terraform&logoColor=white"
    alt: "Terraform Registry"
quick_start: |
  ```hcl
  rds_parameters = {
    ## Nombre y definici√≥n de una instancia RDS
    "00" = {
      
      ## Definiciones para la creaci√≥n del motor
      engine                 = "mariadb"
      engine_version         = "10.6.14"
      instance_class         = "db.t3.micro"
      deletion_protection    = true
      publicly_accessible    = false
      
      ## Definici√≥n de subnets sobre las cuales se desplegar√° y acceder√° al motor
      ## Definido por ids
      subnet_ids             = data.aws_subnets.public.ids
      ## Definido por nombre
      # subnet_name = "${local.common_name_prefix}-db*" # Default: "${local.common_name_prefix}-private*"
      
      ## Reglas de acceso para el recurso
      ingress_with_cidr_blocks = [
        {
          rule        = "mysql-tcp"
          cidr_blocks = "172.1.0.0/16"
        }
      ]
      
      ## Definici√≥n de tama√±o y tipo de storage para el motor
      allocated_storage     = 5
      max_allocated_storage = 10
      storage_type          = null
      
      ## Parametros que utilizara el motor
      parameters = [
        {
          name  = "max_connections"
          value = "150"
        }
      ]
      ## Definiciones de ventanas de mantenimiento y backup
      maintenance_window      = "Sun:04:00-Sun:06:00"
      backup_window           = "03:00-03:30"
      backup_retention_period = "7"
      apply_immediately       = false
      
      ## Habilitaci√≥n y retenci√≥n de servicio de performance insights
      #performance_insights_enabled           = false
      #performance_insights_retention_period  = 7
    }
  }
  
  rds_defaults = var.rds_defaults
  ```
features:
  - icon: üîê
    title: User and Database Management
    short_description: Manages users, databases, and access with credential storage and notifications
    long_description: |
      Deploy lambda function, which manages the creation and modification of *Users*, *Databases*, and their access to them.
      The credentials for the accesses will be stored in a parameter of **Parameter Store**.
      Send notifications of the actions taken.
      Does not remove databases or users; the latter will remain without permissions on the resources.
    examples:
      - title: MySQL / MariaDB code
        code: |
          ```hcl
          rds_parameters = {
            "mysql" = {
              ...
              enable_db_management                    = true
              enable_db_management_logs_notifications = true
              db_management_parameters = {
                databases = [
                  {
                    name    = "mydb1"
                    charset = "utf8mb4"
                    collate = "utf8mb4_general_ci"
                  },
                  {
                    name    = "mydb2"
                    charset = "utf8mb4"
                    collate = "utf8mb4_general_ci"
                  }
                ],
                users = [
                  {
                    username = "user1"
                    host     = "%"
                    password = "password1"
                    grants = [
                      {
                        database   = "mydb1"
                        table      = "*"
                        privileges = "ALL"
                      },
                      {
                        database   = "mydb2"
                        table      = "*"
                        privileges = "SELECT, UPDATE"
                      }
                    ]
                  },
                  {
                    username = "user2"
                    host     = "%"
                    password = "password2"
                    grants = [
                      {
                        database   = "mydb2"
                        table      = "*"
                        privileges = "ALL"
                      }
                    ]
                  }
                ],
                excluded_users = ["rdsadmin", "root", "mariadb.sys", "healthcheck", "rds_superuser_role", "mysql.infoschema", "mysql.session", "mysql.sys"]
              }
              ...
            }
          }
          ```
      - title: PostgreSQL code
        code: |
          ```hcl
          rds_parameters = {
            "postgresql" = {
              ...
              enable_db_management                    = true
              enable_db_management_logs_notifications = true
              db_management_parameters = {
                databases = [
                  {
                    "name" : "db1",
                    "owner" : "root",
                    "schemas" : [
                      {
                        "name" : "public",
                        "owner" : "root"
                      },
                      {
                        "name" : "schema1",
                        "owner" : "usr1"
                      }
                    ]
                  },
                  {
                    "name" : "db2",
                    "owner" : "usr2",
                  },
                  {
                    "name" : "db3",
                    "owner" : "usr3",
                  }
                ],
                roles = [
                  { "rolename" : "example_role_1" },
                  { "rolename" : "example_role_2" }
                ],
                users = [
                  {
                    "username" : "usr1",
                    "password" : "passwd1",
                    "grants" : [
                      {
                        "database" : "db1",
                        "schema" : "public",
                        "privileges" : "ALL PRIVILEGES",
                        "table" : "*"
                      }
                    ]
                  },
                  {
                    "username" : "usr2",
                    "password" : "passwd2",
                    "grants" : [
                      {
                        "privileges" : "example_role_1",
                        "options" : "WITH SET TRUE"
                      },
                      {
                        "privileges" : "example_role_2",
                        "options" : "WITH SET TRUE"
                      }
                    ]
                  },
                  {
                    "username" : "usr3",
                    "password" : "passwd3",
                    "grants" : []
                  }
                ],
                excluded_users = ["rdsadmin", "root", "healthcheck"]
              }
              ...
            }
          }
          ```
  - icon: üíæ
    title: Dump with S3
    short_description: Generates SQL dumps and stores them in S3 for MySQL, MariaDB, and PostgreSQL
    long_description: |
      This module creates the necessary resources to generate an SQL dump and store it in an S3 bucket, along with cleanup scripts for the database. <br/> It supports the database engines **MySQL**, **MariaDB**, and **PostgreSQL**.
    examples:
      - title: Configuration Code
        code: |
          ```hcl
          rds_parameters = {
            "00" = {
              ...
              enable_db_dump_create = true
              db_dump_create_local_path_custom_scripts = "${path.module}/content/custom_sql"
              db_dump_create_schedule_expression = "cron(0 * * * ? *)"
              db_dump_create_db_name = "demo"
              db_dump_create_retention_in_days = 7
              db_dump_create_s3_arn_permission_accounts = [
                "arn:aws:iam::xxxxxxxxxxx:root", # demo.la-dev
                "arn:aws:iam::xxxxxxxxxxx:root", # demo.la-stg
              ]
              ...
            }
          }
          ```
  - icon: üíæ
    title: Restore with S3
    short_description: Restores database from SQL dump and executes cleanup scripts
    long_description: |
      This module creates the necessary resources to perform a restore from an SQL dump stored in a bucket and execute the necessary cleanup scripts. <br/> It supports the database engines **MySQL**, **MariaDB**, and **PostgreSQL**
    examples:
      - title: Configuration Code
        code: |
          ```hcl
          enable_db_dump_restore = true
          db_dump_restore_s3_bucket_name = "demo-l04-core-00-db-dump-create"
          db_dump_restore_db_name = "demo"
          ```
  - icon: üåê
    title: DNS Record
    short_description: Registers a CNAME DNS record in a Route53 hosted zone
    long_description: |
      Register a CNAME DNS record in a Route53 hosted zone that is present within the account, which can be public or private depending on the desired visibility type of the record.
    examples:
      - title: Configuration Code
        code: |
          ```hcl
          dns_records = {
            "" = {
              # zone_name    = local.zone_private
              # private_zone = true
              zone_name    = local.zone_public
              private_zone = false
            }
          }
          ```
  - icon: üï∞Ô∏è
    title: Enrollment of Point in Time Recovery
    short_description: Enables Point in Time Recovery backup policy integration
    long_description: |
      This tag allows the resource to be added to a backup policy of the Point in Time Recovery type. It requires the policy to be deployed with AWS Backups and the tag to be used.
    examples:
      - title: Configuration Code
        code: |
          ```hcl
          tags = { ptr-14d = "true" }
          ```
important_notes: |
  - **üö® Restart Engine During Changes:** Restart the engine during parameter group changes - set `apply_immediately = true`
  - **‚ö†Ô∏è Public Access:** Exposes the resource to the internet - set `publicly_accessible = true`
  - **‚ö†Ô∏è Overwrite Database Data:** Allows overwriting database data within the engine - set `force_replace_data = true`
  - **‚ÑπÔ∏è Storage Growth Limit:** Enables unlimited storage growth - set `max_allocated_storage = null`
input_table: |
  | engine | Database engine | `string` | `"mariadb"` | no |
  | engine_version | Desired engine version | `string` | `"10.6.14"` | no |
  | instance_class | Resource size | `string` | `"db.t3.micro"` | no |
  | deletion_protection | Resource deletion protection | `bool` | `true` | no |
  | publicly_accessible | Enable internet access | `bool` | `false` | no |
  | subnet_ids | List of subnets on which the resource is deployed | `list` | `[]` | no |
  | subnet_name | Wildcard to find the subnets where to deploy engine and lambdas | `string` | `"${local.common_name_prefix}-private*"` | no |
  | ingress_with_cidr_blocks | Inbound rules for the resource | `list` | `[{ rule = "mysql-tcp", cidr_blocks = "172.1.0.0/16" }]` | no |
  | allocated_storage | Minimum instance storage | `number` | `5` | no |
  | max_allocated_storage | Maximum instance storage | `number` | `10` | no |
  | storage_type | Storage type | `string` | `null` | no |
  | parameters | Parameter Group definition | `list` | `[ {   name  = "max_connections, "value = "150" }    ]` | no |
  | maintenance_window | Maintenance window schedule | `string` | `"Sun:04:00-Sun:06:00"` | no |
  | backup_window | Backup window schedule | `string` | `"03:00-03:30"` | no |
  | backup_retention_period | Backup retention in days | `number` | `"7"` | no |
  | apply_immediately | Apply immediately changes that may restart the engine | `bool` | `false` | no |
  | performance_insights_enabled | Enable Performance Insights feature | `bool` | `false` | no |
  | performance_insights_retention_period | Performance Insights information retention | `number` | `7` | no |
  | username | The master username of the database | `string` | `root` | no |
  | password | The master user password generated by the random password resource | `string` | `generada autom√°ticamente` | no |
  | manage_master_user_password | Automatically manage master user password rotation | `bool` | `false` | no |
  | master_user_secret_kms_key_id | KMS key ID to encrypt the master user secret | `string` | `null` | no |
  | manage_master_user_password_rotation | Enable automatic rotation of the master user password | `bool` | `false` | no |
  | master_user_password_rotate_immediately | Rotate master user password immediately | `bool` | `null` | no |
  | master_user_password_rotation_automatically_after_days | Number of days after which the password is rotated automatically | `number` | `null` | no |
  | master_user_password_rotation_duration | Duration in days of the password validity after rotation | `number` | `null` | no |
  | master_user_password_rotation_schedule_expression | Scheduling expression for rotation (example, cron) | `string` | `null` | no |
  | create_db_subnet_group | Indicates whether a subnet group should be created for the database | `bool` | `true` | no |
  | db_subnet_group_name | Name of the subnet group for the database | `string` | `${local.common_name}-${each.key}` | no |
  | db_subnet_group_use_name_prefix | Use a name prefix for the subnet group | `bool` | `false` | no |
  | db_subnet_group_description | Subnet group description | `string` | `null` | no |
  | db_subnet_group_tags | Tags assigned to the subnet group | `map` | `{}` | no |
  | create_db_parameter_group | Indicates whether a parameter group should be created for the database | `bool` | `true` | no |
  | parameter_group_name | Name of the parameter group for the database | `string` | `${local.common_name}-${each.key}` | no |
  | parameter_group_use_name_prefix | Use a name prefix for the parameter group | `bool` | `false` | no |
  | family | Database family for the parameter group | `string` | `mariadb10.6` | no |
  | parameters | List of parameter group parameters | `list` | `[]` | no |
  | parameter_group_description | Parameter group description | `string` | `null` | no |
  | db_parameter_group_tags | Tags assigned to the parameter group | `map` | `{}` | no |
  | create_db_option_group | Indicates whether an option group should be created for the database | `bool` | `true` | no |
  | option_group_name | Name of the option group for the database | `string` | `${local.common_name}-${each.key}` | no |
  | option_group_use_name_prefix | Use a name prefix for the option group | `bool` | `false` | no |
  | major_engine_version | Major engine version for the option group | `string` | `10.6` | no |
  | options | List of option group options | `list` | `[]` | no |
  | option_group_description | Option group description | `string` | `null` | no |
  | option_group_timeouts | Timeouts for option group operations | `map` | `{}` | no |
  | db_option_group_tags | Tags assigned to the option group | `map` | `{}` | no |
  | option_group_skip_destroy | Whether to prevent the option group from being destroyed | `bool` | `null` | no |
  | create_db_instance | Indicates whether to create the database instance | `bool` | `true` | no |
  | engine_lifecycle_support | Database engine lifecycle support | `string` | `null` | no |
  | instance_class | Database instance class. | `string` | `db.t3.micro` | no |
  | port | Port for database connection. | `number` | `3306` | no |
  | db_name | Database name. | `string` | `null` | no |
  | vpc_security_group_ids | List of VPC security group IDs. | `list` | `[module.security_group_rds]` | no |
  | network_type | Network type for the database. | `string` | `null` | no |
  | availability_zone | Availability zone for the database. | `string` | `null` | no |
  | multi_az | Enable multi-AZ for high availability. | `bool` | `false` | no |
  | kms_key_id | KMS key ID for database encryption. | `string` | `null` | no |
  | ca_cert_identifier | CA certificate identifier for the database. | `string` | `null` | no |
  | publicly_accessible | Indicates if the database is publicly accessible. | `bool` | `false` | no |
  | deletion_protection | Protection against database deletion. | `bool` | `true` | no |
  | timeouts | Timeout settings for the database. | `map` | `{}` | no |
  | snapshot_identifier | Snapshot identifier for database restore. | `string` | `null` | no |
  | db_instance_tags | Tags assigned to the database instance. | `map` | `{}` | no |
  | custom_iam_instance_profile | Custom IAM instance profile. | `string` | `null` | no |
  | dedicated_log_volume | Indicates if a dedicated volume should be created for database logs. | `bool` | `false` | no |
  | allocated_storage | Allocated storage for the database. | `number` | `5` | no |
  | max_allocated_storage | Maximum allocated storage for the database. | `number` | `10` | no |
  | storage_type | Storage type (gp2, io1, etc.). | `string` | `null` | no |
  | iops | Number of IOPS allocated for storage. | `number` | `null` | no |
  | storage_throughput | Storage performance in MB/s. | `number` | `null` | no |
  | storage_encrypted | Indicates if storage is encrypted. | `bool` | `true` | no |
  | upgrade_storage_config | Configuration for storage upgrade. | `string` | `null` | no |
  | iam_database_authentication_enabled | Enable IAM authentication for the database. | `bool` | `false` | no |
  | domain | Domain to which the database is associated. | `string` | `null` | no |
  | domain_auth_secret_arn | ARN of the domain authentication secret. | `string` | `null` | no |
  | domain_dns_ips | DNS IPs associated with the domain. | `list` | `null` | no |
  | domain_fqdn | FQDN (fully qualified domain name) of the domain. | `string` | `null` | no |
  | domain_iam_role_name | Name of the IAM role associated with the domain. | `string` | `null` | no |
  | domain_ou | Organizational unit (OU) of the domain. | `string` | `null` | no |
  | delete_automated_backups | Indicates if automated backups should be deleted. | `bool` | `true` | no |
  | restore_to_point_in_time | Restore to a specific point in time. | `string` | `null` | no |
  | final_snapshot_identifier_prefix | Prefix for the final snapshot identifier. | `string` | `null` | no |
  | skip_final_snapshot | Skip final snapshot creation on instance deletion. | `bool` | `true` | no |
  | copy_tags_to_snapshot | Copy tags to the snapshot when creating it. | `bool` | `true` | no |
  | maintenance_window | Maintenance window for the RDS instance. | `string` | `"Sun:04:00-Sun:06:00"` | no |
  | allow_major_version_upgrade | Allow major version upgrade of the database engine. | `bool` | `false` | no |
  | auto_minor_version_upgrade | Automatic minor version upgrade. | `bool` | `true` | no |
  | apply_immediately | Apply changes immediately, if possible. | `bool` | `false` | no |
  | create_monitoring_role | Create the monitoring role for RDS. | `bool` | `true` | no |
  | monitoring_role_arn | ARN of the existing monitoring role. | `string` | `null` | no |
  | monitoring_role_name | Name of the monitoring role. | `string` | `"${local.common_name}-rds-monitoring-${each.key}"` | no |
  | monitoring_role_use_name_prefix | Use prefix for the monitoring role name. | `bool` | `false` | no |
  | monitoring_role_description | Description of the monitoring role. | `string` | `null` | no |
  | monitoring_interval | Monitoring interval in seconds. | `number` | `0` | no |
  | performance_insights_kms_key_id | KMS Key ID for Performance Insights. | `string` | `null` | no |
  | create_cloudwatch_log_group | Create log group in CloudWatch. | `bool` | `false` | no |
  | enabled_cloudwatch_logs_exports | Export logs to CloudWatch. | `list` | `[]` | no |
  | cloudwatch_log_group_retention_in_days | Log retention in CloudWatch (days). | `number` | `7` | no |
  | cloudwatch_log_group_kms_key_id | KMS Key ID for the log group in CloudWatch. | `string` | `null` | no |
  | monitoring_role_permissions_boundary | Permission limit for the monitoring role. | `string` | `null` | no |
  | cloudwatch_log_group_skip_destroy | Skip the destruction of the log group in CloudWatch. | `bool` | `null` | no |
  | cloudwatch_log_group_class | Class of the log group in CloudWatch. | `string` | `null` | no |
  | license_model | License model for databases. | `string` | `null` | no |
  | timezone | Time zone for SQL Server databases. | `string` | `null` | no |
  | replicate_source_db | Source instance name for replication. | `string` | `null` | no |
  | replica_mode | Replica mode for the database instance. | `string` | `null` | no |
  | character_set_name | Name of the database character set. | `string` | `null` | no |
  | nchar_character_set_name | Name of the NCHAR character set of the database. | `string` | `null` | no |
  | s3_import | Data import configuration from S3 for MySQL. | `string` | `null` | no |
  | db_instance_role_associations | Database instance role associations (e.g., IAM). | `map` | `{}` | no |
